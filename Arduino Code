#include <WiFiNINA.h>
#include <ArduinoHttpClient.h>
#include <Arduino_JSON.h>
#include "RTCZero.h"
#include <malloc.h>
 
// ---- WiFi Configuration ----
const char ssid[] = "BME_Router";
const char pass[] = "password123";
WiFiClient wifi;
HttpClient client = HttpClient(wifi, "192.168.10.2", 5000);  // Flask server IP/port
 
// ---- Pin Assignments ----
const int micPin = A1;
const int buttonPin = 9;
const int redPin = 12, greenPin = 11, bluePin = 10;
 
// ---- Sampling Settings ----
const int samplesPerRecording = 100;
uint8_t buffer[samplesPerRecording];
 
// ---- State Variables ----
bool readyToRecord = true;
int recordingIndex = 0;
String sessionTimestamp = "";
 
// ---- Body Location Labels ----
String locationNames[26] = {
  "FL1", "FR1", "FL2", "FR2", "FL3", "FR3",
  "FL4", "FR4", "FL5", "FR5", "FL6", "FR5",
  "BL1", "BR1", "BL2", "BR2", "BL3", "BR3",
  "BL4", "BR4", "BL5", "BR5", "BL6", "BR6",
  "BL7", "BR7"
};
 
RTCZero rtc;
 
int freeMemory() {
  struct mallinfo info = mallinfo();
  return info.fordblks;
}
 
void setColor(int r, int g, int b) {
  analogWrite(redPin, r);
  analogWrite(greenPin, g);
  analogWrite(bluePin, b);
}
 
void connectToWiFi() {
  setColor(255, 0, 100);  // Purple = attempting Wi-Fi
  Serial.println("Connecting to Wi-Fi...");
  WiFi.begin(ssid, pass);  // Call only once
 
 
  int attempts = 0;
  while (WiFi.status() != WL_CONNECTED && attempts < 10) {
    delay(1000);
    Serial.print(".");
    attempts++;
  }
 
  if (WiFi.status() == WL_CONNECTED) {
    Serial.println("\nWi-Fi connected!");
    Serial.print("IP Address: ");
    Serial.println(WiFi.localIP());
    setColor(0, 255, 0);  // Green = connected
  } else {
    Serial.println("\nWi-Fi connection FAILED.");
    setColor(255, 0, 0);  // Red = failed
    while (true)
      ;  // Halt the program
  }
}
 
String getCurrentTimestamp() {
  char buffer[25];
  sprintf(buffer, "%04d-%02d-%02dT%02d:%02d:%02d",
          rtc.getYear() + 2000, rtc.getMonth(), rtc.getDay(),
          rtc.getHours(), rtc.getMinutes(), rtc.getSeconds());
  return String(buffer);
}
 
void setup() {
  Serial.begin(115200);
  while (!Serial)
    ;  // Ensure Serial is ready (optional, helpful on USB)
 
  pinMode(buttonPin, INPUT_PULLUP);
  pinMode(redPin, OUTPUT);
  pinMode(greenPin, OUTPUT);
  pinMode(bluePin, OUTPUT);
 
  setColor(255, 0, 100);  // Purple = startup
  delay(3000);            // Short delay before trying Wi-Fi
 
  connectToWiFi();
  rtc.begin();
  //setup rtc date and time
  rtc.setHours(16);
  rtc.setMinutes(42);
  rtc.setSeconds(0);
  rtc.setDay(15);
  rtc.setMonth(5);
  rtc.setYear(2025);
}
 
void loop() {
  if (readyToRecord && digitalRead(buttonPin) == LOW) {
    delay(200);  // debounce
 
    if (recordingIndex == 0) {
      sessionTimestamp = getCurrentTimestamp();
    }
 
    for (int i = 1; i < 11; i++) {
      setColor(0, 0, 255);  // Blue = recording
      recordSamples(buffer);
 
      setColor(255, 0, 0);  // Red = sending
      sendToFlask(locationNames[recordingIndex], buffer);
    }
 
    recordingIndex++;
    delay(500);           // brief pause
    setColor(0, 255, 0);  // Green = ready
 
    if (recordingIndex >= 26) {
      recordingIndex = 0;
      sessionTimestamp = "";
    }
  }
}
 
void recordSamples(uint8_t* buffer) {
  unsigned long intervalMicros = 20;  // 25kHz = 40Âµs/sample
  unsigned long start = micros();
  for (int i = 0; i < samplesPerRecording; i++) {
    buffer[i] = analogRead(micPin) >> 2;  // 8-bit downsample
    while (micros() - start < (i + 1) * intervalMicros)
      ;
  }
}
 
void sendToFlask(String locationLabel, uint8_t* buffer) {
  JSONVar payload;
  payload["timestamp"] = sessionTimestamp;
  payload["location"] = locationLabel;
 
  JSONVar data;
  for (int i = 0; i < samplesPerRecording; i++) {
    data[i] = buffer[i];
  }
  payload["data"] = data;
 
  String jsonStr = JSON.stringify(payload);
 
  client.beginRequest();
  client.post("/data");
  client.sendHeader("Content-Type", "application/json");
  client.sendHeader("Content-Length", jsonStr.length());
  client.beginBody();
  client.print(jsonStr);
  client.endRequest();
 
  int statusCode = client.responseStatusCode();
  Serial.print("HTTP Status: ");
  Serial.println(statusCode);
}
